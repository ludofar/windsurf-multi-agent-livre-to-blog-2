from .base_agent import BaseAgent
from typing import Dict, Any, List, Optional
import json
import logging
import os
from datetime import datetime, time
from enum import Enum

logger = logging.getLogger(__name__)

class PostType(str, Enum):
    CONCEPT = "concept"
    INTERACTION = "interaction"
    TIP = "astuce"
    QUOTE = "citation"
    NEWS = "actualite"

class SocialCreatorAgent(BaseAgent):
    """
    Agent sp√©cialis√© dans la cr√©ation de contenu Facebook pour la M√©decine Traditionnelle Chinoise.
    Cr√©e 2 publications quotidiennes optimis√©es pour l'engagement.
    """
    
    def __init__(self, model: str = None):
        default_model = os.getenv('DEFAULT_MODEL', 'qwen/qwen3-coder')
        super().__init__(
            name="Facebook Content Creator",
            model=model or default_model
        )
        self.platform = "facebook"
        self.post_types = [PostType.CONCEPT, PostType.INTERACTION, PostType.TIP, PostType.QUOTE, PostType.NEWS]
    
    def generate_prompt(self, input_data: Dict[str, Any]) -> str:
        """
        G√©n√®re le prompt pour la cr√©ation de publications Facebook.
        
        Args:
            input_data: Doit contenir 'contenu_article' (dict) avec les cl√©s :
                - titre (str)
                - points_cles (List[str])
                - concepts_cles (List[str])
                - citations (List[str])
                - conseils_pratiques (List[str])
        """
        contenu = input_data.get('contenu_article', {})
        
        return f"""
        # INSTRUCTIONS POUR LA CR√âATION DE PUBLICATIONS FACEBOOK MTC
        
        ## CONTEXTE
        Tu es un expert en cr√©ation de contenu Facebook sp√©cialis√© en M√©decine Traditionnelle Chinoise (MTC).
        
        ## MISSION
        Cr√©e 2 publications Facebook quotidiennes bas√©es sur le contenu fourni.
        
        ## CONTENU SOURCE
        Titre : {contenu.get('titre', 'M√©decine Traditionnelle Chinoise')}
        Concepts cl√©s : {', '.join(contenu.get('concepts_cles', []))}
        Points importants : {', '.join(contenu.get('points_cles', []))}
        Citations : {contenu.get('citations', [])}
        Conseils pratiques : {contenu.get('conseils_pratiques', [])}
        
        ## DIRECTIVES DE CR√âATION
        
        1. PUBLICATION 1 (Matin - 9h) :
           - Type : Concept/Technique sp√©cifique
           - Objectif : √âduquer et informer
           - Ton : Professionnel mais accessible
           
        2. PUBLICATION 2 (Apr√®s-midi - 17h) :
           - Type : Question interactive OU Astuce pratique
           - Objectif : Engager la communaut√©
           - Ton : Conversationnel et engageant
        
        ## EXIGENCES COMMUNES
        - Longueur : 100-200 mots par publication
        - Inclure 3-5 hashtags pertinents
        - Utiliser 1-2 √©mojis maximum
        - Ajouter un appel √† l'action clair
        - Proposer des suggestions visuelles
        
        ## EXEMPLES DE STRUCTURE
        
        Publication 1 (Concept) :
        "Saviez-vous que [concept MTC] ? üåø
        
        [Explication simple et claire en 2-3 phrases]
        
        üí° Pourquoi c'est important ? [B√©n√©fice principal]
        
        üëâ [Appel √† l'action] Dites-moi en commentaire si vous connaissiez ce concept !
        
        #MTC #MedecineChinoise #[Concept]"
        
        Publication 2 (Interaction/Astuce) :
        "‚ùì [Question ouverte sur un aspect pratique de la MTC]
        
        [Contexte en 1-2 phrases si n√©cessaire]
        
        üí¨ Partagez votre exp√©rience en commentaire !
        
        #MTC #AstuceSante #[MotCl√©]"
        
        ## FORMAT DE SORTIE (JSON)
        {{
            "publications": [
                {{
                    "type": "concept | interaction | astuce | citation | actualite",
                    "horaire": "09:00 | 17:00",
                    "texte": "Texte de la publication avec √©mojis",
                    "hashtags": ["#MTC", "#SanteNaturelle", ...],
                    "appel_action": "Phrase incitant √† l'engagement",
                    "suggestions_visuelles": ["Description image 1", "Description image 2"],
                    "objectif": "R√©sum√© en 1 phrase de l'objectif de la publication"
                }}
            ]
        }}
        """
    
    def _parse_response(self, response: str) -> Dict[str, Any]:
        """
        Parse la r√©ponse du mod√®le en JSON et valide la structure.
        
        Args:
            response: R√©ponse brute du mod√®le
            
        Returns:
            Dict: Donn√©es structur√©es des publications ou erreur
        """
        try:
            # Nettoyage de la r√©ponse pour extraire uniquement le JSON
            start = response.find('{')
            end = response.rfind('}') + 1
            if start == -1 or end == 0:
                logger.warning("Aucun JSON trouv√© dans la r√©ponse, utilisation des publications par d√©faut")
                return self._generate_default_posts()
                
            json_str = response[start:end]
            data = json.loads(json_str)
            
            # Validation de base de la structure
            if 'publications' not in data or not isinstance(data['publications'], list):
                raise ValueError("Format de r√©ponse invalide: 'publications' manquant ou invalide")
                
            # Validation de chaque publication
            required_fields = ['type', 'horaire', 'texte', 'hashtags', 'appel_action', 'suggestions_visuelles', 'objectif']
            for pub in data['publications']:
                if not all(field in pub for field in required_fields):
                    missing = [f for f in required_fields if f not in pub]
                    raise ValueError(f"Publication invalide: champs manquants {missing}")
                    
            return data
            
        except (json.JSONDecodeError, ValueError) as e:
            logger.error(f"Erreur lors du parsing de la r√©ponse: {str(e)}")
            logger.warning("Utilisation des publications par d√©faut")
            return self._generate_default_posts()
    
    def _generate_default_posts(self, theme: str = "M√©decine Traditionnelle Chinoise") -> Dict[str, Any]:
        """
        G√©n√®re des publications Facebook par d√©faut en cas d'erreur.
        
        Args:
            theme: Th√®me principal pour les publications
            
        Returns:
            Dict: Publications par d√©faut au format attendu
        """
        return {
            "publications": [
                {
                    "type": PostType.CONCEPT,
                    "horaire": "09:00",
                    "texte": (
                        "D√©couvrez les bases de l'√©nergie vitale (Qi) en MTC ! üåø\n\n"
                        "Le Qi est le concept fondamental de la m√©decine chinoise, repr√©sentant l'√©nergie vitale qui "
                        "circule dans notre corps. En √©quilibrant cette √©nergie, on peut am√©liorer sa sant√© globale.\n\n"
                        "üí° Pourquoi c'est important ? Comprendre le Qi aide √† pr√©venir les d√©s√©quilibres √©nerg√©tiques.\n\n"
                        "üëâ Connaissiez-vous ce concept ? Dites-le nous en commentaire !"
                    ),
                    "hashtags": ["#MTC", "#EnergieVitale", "#SanteNaturelle", "#MedecineChinoise"],
                    "appel_action": "Partagez votre exp√©rience avec le Qi en commentaire !",
                    "suggestions_visuelles": [
                        "Illustration des m√©ridiens √©nerg√©tiques du corps humain",
                        "Personne en position de Qi Gong dans un cadre naturel"
                    ],
                    "objectif": "√âduquer sur le concept de base du Qi en MTC"
                },
                {
                    "type": PostType.INTERACTION,
                    "horaire": "17:00",
                    "texte": (
                        "‚ùì Quelle est votre technique de MTC pr√©f√©r√©e pour vous d√©tendre ?\n\n"
                        "Acupuncture, Qi Gong, phytoth√©rapie ou autre ? üíÜ‚Äç‚ôÄÔ∏è\n\n"
                        "üí¨ Partagez vos exp√©riences en commentaire, nous sommes curieux de vous lire !"
                    ),
                    "hashtags": ["#MTC", "#BienEtre", "#SanteNaturelle", "#Communaut√©MTC"],
                    "appel_action": "R√©agissez avec un üëç et partagez votre technique pr√©f√©r√©e !",
                    "suggestions_visuelles": [
                        "Personne d√©tendue apr√®s une s√©ance d'acupuncture",
                        "Groupe pratiquant le Tai Chi dans un parc"
                    ],
                    "objectif": "Engager la communaut√© dans un √©change sur les pratiques de MTC"
                }
            ]
        }
        
    async def create_posts(self, content_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Cr√©e des publications Facebook √† partir du contenu fourni.
        
        Args:
            content_data: Dictionnaire contenant les donn√©es du contenu source avec les cl√©s :
                - titre (str): Titre du contenu
                - points_cles (List[str]): Points cl√©s du contenu
                - concepts_cles (List[str]): Concepts cl√©s de MTC
                - citations (List[str]): Citations int√©ressantes
                - conseils_pratiques (List[str]): Conseils pratiques li√©s au contenu
                
        Returns:
            Dict: Contient les publications g√©n√©r√©es ou un message d'erreur
        """
        try:
            # Pr√©paration des donn√©es pour le prompt
            input_data = {
                'contenu_article': {
                    'titre': content_data.get('titre', 'M√©decine Traditionnelle Chinoise'),
                    'points_cles': content_data.get('points_cles', []),
                    'concepts_cles': content_data.get('concepts_cles', []),
                    'citations': content_data.get('citations', []),
                    'conseils_pratiques': content_data.get('conseils_pratiques', [])
                }
            }
            
            # G√©n√©ration du prompt et appel au mod√®le
            prompt = self.generate_prompt(input_data)
            logger.info("G√©n√©ration des publications Facebook...")
            
            # Appel au mod√®le avec gestion des erreurs
            response = await self.process({'content': prompt})
            if not response or 'error' in response:
                logger.warning("Erreur lors de l'appel au mod√®le, utilisation des publications par d√©faut")
                return self._generate_default_posts(content_data.get('titre', 'M√©decine Traditionnelle Chinoise'))
                
            # La r√©ponse est d√©j√† un dictionnaire pars√© par BaseAgent
            publications = response.get('publications', [])

            # Journalisation pour le d√©bogage
            logger.info(f"Publications g√©n√©r√©es avec succ√®s: {len(publications)} publications")
            
            return publications           
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des publications: {str(e)}", exc_info=True)
            return {
                "error": "Une erreur est survenue lors de la g√©n√©ration des publications",
                "details": str(e),
                "publications": self._generate_default_posts(content_data.get('titre', 'M√©decine Traditionnelle Chinoise'))
            }
