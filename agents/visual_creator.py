from .base_agent import BaseAgent
from typing import Dict, Any
from enum import Enum
import logging
import os
from datetime import datetime

logger = logging.getLogger(__name__)

class VisualType(str, Enum):
    INFOGRAPHIE = "infographie"
    DIAGRAMME = "diagramme"
    ILLUSTRATION = "illustration"
    GRAPHIQUE = "graphique"
    CITATION = "citation"
    CARROUSEL = "carrousel"
    SCHEMA = "schema"
    PHOTO = "photo"

class VisualStyle(str, Enum):
    MINIMALISTE = "minimaliste"
    TRADITIONNEL = "traditionnel_chinois"
    MODERNE = "moderne"
    AQUARELLE = "aquarelle"
    LIGNE = "ligne"
    REALISTE = "realiste"
    DESSIN_ANIME = "dessin_anime"
    FLAT_DESIGN = "flat_design"

class VisualCreatorAgent(BaseAgent):
    """
    Agent sp√©cialis√© dans la cr√©ation de prompts pour la g√©n√©ration d'√©l√©ments visuels MTC.
    G√©n√®re des m√©tadonn√©es pour les visuels incluant balise alt, l√©gende et description.
    """
    
    def __init__(self, model: str = None):
        default_model = os.getenv('DEFAULT_MODEL', 'qwen/qwen3-coder')
        super().__init__(
            name="MTC Visual Prompt Generator",
            model=model or default_model
        )
    
    def generate_prompt(self, input_data: Dict[str, Any]) -> str:
        """
        G√©n√®re un prompt pour la cr√©ation d'un visuel avec m√©tadonn√©es compl√®tes.
        
        Args:
            input_data: Doit contenir les cl√©s suivantes :
                - type_visuel: Type de visuel (infographie, diagramme, etc.)
                - theme: Th√®me principal du visuel
                - style: Style visuel souhait√© (optionnel)
                - elements: Liste des √©l√©ments √† inclure dans le visuel
                - format_sortie: Format de sortie (jpg, png, etc.)
                
        Returns:
            str: Prompt format√© en markdown avec balises alt, l√©gende et description
        """
        raw_type = input_data.get('type_visuel', 'infographie')
        try:
            type_visuel = VisualType(raw_type)
        except ValueError:
            logger.warning(f"Type de visuel invalide '{raw_type}', utilisation de la valeur par d√©faut.")
            type_visuel = VisualType.INFOGRAPHIE

        raw_style = input_data.get('style', 'moderne')
        try:
            style = VisualStyle(raw_style)
        except ValueError:
            logger.warning(f"Style visuel invalide '{raw_style}', utilisation de la valeur par d√©faut.")
            style = VisualStyle.MODERNE

        theme = input_data.get('theme', 'M√©decine Traditionnelle Chinoise')
        elements = input_data.get('elements', [])
        format_sortie = input_data.get('format_sortie', 'jpg')
        
        # Construction du prompt en markdown
        prompt = f"""# üñºÔ∏è Prompt pour la cr√©ation d'un visuel MTC

## üìù M√©tadonn√©es du visuel

### Fran√ßais üá´üá∑
- **Type de visuel**: {type_visuel.value}
- **Th√®me principal**: {theme}
- **Style visuel**: {style.value}
- **Format de sortie**: {format_sortie.upper()}

### English üá¨üáß
- **Visual type**: {type_visuel.value}
- **Main theme**: {theme}
- **Visual style**: {style.value}
- **Output format**: {format_sortie.upper()}

## üìã Instructions pour la cr√©ation

Cr√©ez une image qui illustre parfaitement le th√®me "{theme}" dans un style {style.value}.

### √âl√©ments √† inclure:
"""
        
        # Ajout des √©l√©ments √† inclure
        for element in elements:
            prompt += f"- {element}\n"
            
        # G√©n√©ration du nom de fichier bas√© sur le th√®me et la date
        filename = f"{theme.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.{format_sortie}"
        
        prompt += f"""
## üìù M√©tadonn√©es de l'image (√† inclure dans le fichier .md)

```markdown
<!-- Fran√ßais üá´üá∑ -->
### M√©tadonn√©es pour l'image
- **Nom du fichier**: `{filename}`
- **Balise Alt**: "{type_visuel.value} illustrant le th√®me {theme} en style {style.value}"
- **L√©gende**: "{type_visuel.value.capitalize()} sur le th√®me de {theme} en m√©decine traditionnelle chinoise"
- **Description**: "{type_visuel.value.capitalize()} d√©taillant les aspects cl√©s de {theme} en MTC, avec un style {style.value}."

<!-- English üá¨üáß -->
### Image metadata
- **Filename**: `{filename}`
- **Alt Text**: "{type_visuel.value} illustrating the theme {theme} in {style.value} style"
- **Caption**: "{type_visuel.value.capitalize()} on the theme of {theme} in traditional Chinese medicine"
- **Description**: "Detailed {type_visuel.value} about key aspects of {theme} in TCM, with {style.value} style."
```

## üé® Instructions cr√©atives

1. **Style et esth√©tique**:
   - Utilisez un style {style.value} coh√©rent
   - Choisissez une palette de couleurs harmonieuse
   - Assurez-vous d'une excellente lisibilit√© du texte

2. **√âl√©ments visuels**:
   - Int√©grez des √©l√©ments graphiques pertinents pour la MTC
   - Utilisez des ic√¥nes et illustrations de haute qualit√©
   - Maintenez un √©quilibre visuel

3. **Accessibilit√©**:
   - Contraste suffisant pour la lisibilit√©
   - Texte de remplacement descriptif
   - Structure claire et hi√©rarchie visuelle

## üì§ Format de sortie

G√©n√©rez une image au format {format_sortie.upper()} avec les caract√©ristiques suivantes:
- Haute r√©solution (minimum 1200x630px)
- Qualit√© optimis√©e pour le web
- Espace colorim√©trique sRGB
"""
        
        return prompt
    
    async def process(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite la demande de g√©n√©ration de prompt visuel.
        
        Args:
            input_data: Donn√©es d'entr√©e pour la g√©n√©ration
            
        Returns:
            Dict[str, Any]: Le prompt g√©n√©r√©
        """
        return {
            'status': 'success',
            'prompt': self.generate_prompt(input_data)
        }
